1. качаем VB


2. качаем iso Ubuntu
https://releases.ubuntu.com/20.04/?ref=novosti-ubuntu-linux


3. root / 111111
user


4. Прописать язык English Kingdom


5. Разрешение экрана в настройках самой убунты


6. Выдаем sudo:
	1. Откройте терминал и введите команду:
	su -

	2. Введите пароль пользователя root, чтобы войти в систему под пользователем root.

	3. Введите команду:
	adduser username sudo
	Замените "username" на имя пользователя, которого вы хотите добавить в группу sudo.

	4. После этого перезапустите систему или введите команду:
	sudo reboot

	Чтобы изменения вступили в силу.

	После перезапуска пользователь сможет использовать команды, которые требуют прав sudo, добавляя перед ними командой sudo. Например, чтобы выполнить команду с правами sudo, пользователь должен ввести команду следующим образом:

	sudo command


7. sudo apt update
sudo apt install docker.io

sudo apt install docker-compose


8. Создал каталоги для всех конфигураций:
mkdir /opt/{cms_stack,prometheus_stack}


9. создал ТГ бота:

name: TEST_PROM_TG_BOT
user name: prom_tg_bot

token: 6107835046:AAFJ75V6D0ndZKv0Z0Cejfkz7VVCfiTvDXU


10. Создал docker-compose.yml для запуска exporter, alertmanager и prometheus:

/opt/prometheus_stack/docker-compose.yml

version: '3.2'

services:

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus:/etc/prometheus/
    container_name: prometheus
    hostname: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"
    networks:
      - default

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    container_name: exporter
    hostname: exporter
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.filesystem.ignored-mount-points
      - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
    ports:
      - 9100:9100
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"
    networks:
      - default

networks:
  default:
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16


11. Конфигурация node-exporter:

[Unit]
Description=Prometheus Node Exporter
After=network.target

[Service]
User=node_exporter
Group=node_exporter
Type=simple
ExecStart=/usr/local/bin/node_exporter \
  --collector.textfile.directory=/var/lib/node_exporter/textfile_collector \
  --collector.nginx \
  --collector.phpfpm \
  --collector.postgres \
  --web.listen-address=0.0.0.0:9100

[Install]
WantedBy=default.target
		

12. Конфигурация prometheus:

scrape_configs:
  - job_name: node
    scrape_interval: 5s
    static_configs:
    - targets: ['node-exporter:9100']



13. Создал docker-compose.yml для запуска nginx, php и mysql:

/opt/cms_stack/docker-compose.yml

version: '3.2'

services:
  web:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./app:/var/www/html
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - php
  php:
    image: php:fpm
    volumes:
      - ./app:/var/www/html
  db:
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: dbname
      MYSQL_USER: dbuser
      MYSQL_PASSWORD: dbpassword
    volumes:
      - ./db:/var/lib/mysql


14. Конфигурация nginx:

/opt/cms_stack/nginx.conf

events {
  worker_connections 1024;
}

http {
  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  access_log /var/log/nginx/access.log;

  sendfile on;
  keepalive_timeout 65;

  server {
    listen 80 default_server;
    listen [::]:80 default_server;

    root /var/www/html;
    index index.html index.htm;

    server_name _;

    location / {
      try_files $uri $uri/ =404;
    }

    error_page 404 /404.html;
    location = /40x.html {
    }

    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
    }
  }
}


15. Конфигурация Alertmanager:

/opt/prometheus_stack/config.yml

global:
  resolve_timeout: 5m
  receiver: telegram

route:
  group_by: ['alertname']
  group_wait: 10s
  group_interval: 5m
  repeat_interval: 1h
  receiver: telegram
  routes:
    - match:
        alertname: 'NginxDown'
      receiver: 'critical-telegram'
    - match:
        alertname: 'PHPFpmDown'
      receiver: 'critical-telegram'
    - match:
        alertname: 'PostgresDown'
      receiver: 'critical-telegram'

receivers:
- name: critical-telegram
  webhook_configs:
  - url: 'https://api.telegram.org/bot6107835046:AAFJ75V6D0ndZKv0Z0Cejfkz7VVCfiTvDXU/sendMessage'
    send_resolved: true
    http_config:
      bearer_token: 'prom_tg_bot'
    message: '{{ .CommonAnnotations.summary }}'
    chat_id: 'prom_tg_bot'
    level: 'critical'


16. Запуск всех приложений:

cd /opt/cms_stack && docker-compose up -d
cd /opt/prometheus_stack && dockerp-compose up -d

